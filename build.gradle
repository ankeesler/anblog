/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.5.RELEASE"
        classpath "org.openapitools:openapi-generator-gradle-plugin:4.0.0"
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

apply plugin: 'org.openapi.generator'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group = "com.marshmallow.anblog"
version = "1.0.0-RELEASE"
sourceCompatibility = 1.8

dependencies {
    // TODO: this is from the generated pom.xml, it would be nice if this were automatic...
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.1.0'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'javax.validation:validation-api'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cloud-connectors'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'mysql:mysql-connector-java'
    implementation 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

// Define the main class for the application
mainClassName = 'com.marshmallow.anblog.OpenAPI2SpringBoot'

task buildJavaServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "anblog.yml"
    outputDir = "$buildDir/generated/sources/openapi"
    configOptions = [
            basePackage    : "com.marshmallow.anblog",
            delegatePattern: true,
    ]
}

task buildRubyClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "ruby"
    inputSpec = "anblog.yml"
    outputDir = "$rootDir/client"
    configOptions = [
            moduleName    : "Anblog",
            gemName       : "anblog",
            gemVersion    : "1.0.0",
            gemHomepage   : "https://github.com/ankeesler/anblog",
            gemSummary    : "A command line client for Anblog",
            gemDescription: "This gem provides a command line user interface for an Anblog API",
            gemAuthor     : "Andrew Keesler"
    ]
}

task codegen(dependsOn: ["buildJavaServer", "buildRubyClient"])

openApiValidate {
    inputSpec = "anblog.yml"
}

compileJava.dependsOn tasks.codegen
sourceSets.main.java.srcDir buildJavaServer.outputDir.get() + "/src/main/java"
sourceSets.main.resources.srcDir buildJavaServer.outputDir.get() + "/src/main/resources"

bootRun { systemProperties = System.properties }

task cfPush(type: Exec, dependsOn: [test, bootJar]) {
    commandLine 'cf', 'push'
}