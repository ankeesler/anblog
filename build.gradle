/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.5.RELEASE"
        classpath "org.openapitools:openapi-generator-gradle-plugin:4.0.0"
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    // Display git properties in info endpoint
    id "com.gorylenko.gradle-git-properties" version "1.5.1"

    id 'checkstyle'

    id 'com.google.protobuf' version '0.8.8'
}

apply plugin: 'org.openapi.generator'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group = "com.marshmallow.anblog"
version = "1.0.0-RELEASE"
sourceCompatibility = 1.8

def grpcVersion = '1.23.0'
//def protobufVersion = '3.11.4'
def protocVersion = '3.6.1'
def nettyVersion = '4.1.29.Final'

dependencies {
    // TODO: this is from the generated pom.xml, it would be nice if this were automatic...
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'org.openapitools:jackson-databind-nullable:0.1.0'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'javax.validation:validation-api'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cloud-connectors'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'mysql:mysql-connector-java'
    implementation 'com.h2database:h2'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr353:2.10.2'
    implementation 'javax.json:javax.json-api:1.1.4'
    implementation 'org.glassfish:javax.json:1.1.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation "com.google.api.grpc:proto-google-common-protos:1.12.0"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.netty:netty-transport-native-unix-common:${nettyVersion}"
    implementation "io.netty:netty-all:${nettyVersion}"

//    implementation "io.grpc:grpc-netty:${grpcVersion}"
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-stub:${grpcVersion}"
//    implementation "io.netty:netty-transport-native-epoll:${nettyVersion}:linux-x86_64"
//    implementation "io.netty:netty-transport-native-kqueue:${nettyVersion}:osx-x86_64"
//    protobuf 'com.google.protobuf:protobuf-java:3.0.2'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

// Define the main class for the application
mainClassName = 'com.marshmallow.anblog.Main'

task buildJavaServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "anblog.yml"
    outputDir = "$buildDir/generated/sources/openapi"
    configOptions = [
            delegatePattern: true,
    ]
}

task buildRubyClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "ruby"
    inputSpec = "anblog.yml"
    outputDir = "$rootDir/client"
    configOptions = [
            moduleName    : "Anblog",
            gemName       : "anblog",
            gemVersion    : "1.0.0",
            gemHomepage   : "https://github.com/ankeesler/anblog",
            gemSummary    : "A command line client for Anblog",
            gemDescription: "This gem provides a command line user interface for an Anblog API",
            gemAuthor     : "Andrew Keesler"
    ]
}

openApiValidate {
    inputSpec = "anblog.yml"
}

compileJava.dependsOn tasks.buildJavaServer
sourceSets.main.java.srcDir buildJavaServer.outputDir.get() + "/src/main/java"
sourceSets.main.resources.srcDir buildJavaServer.outputDir.get() + "/src/main/resources"

bootRun { systemProperties = System.properties }

task checkAll(dependsOn: ["check", "testClient", "testIntegration"])

task deploy(type: Exec, dependsOn: [checkAll, bootJar]) {
    commandLine 'cf', 'push'
}

task testClient(type: Exec, dependsOn: "buildRubyClient") {
    commandLine 'rake', 'rubocop', 'spec'
    workingDir 'client'
}

task testIntegration(type: Exec, dependsOn: "buildRubyClient") {
  commandLine 'script/integration_test.sh'
}

checkstyle {
    toolVersion '8.29'
}

// Ignore the generated code, which doesn't follow some pieces of the coding standard.
[checkstyleMain, checkstyleTest].each() {
    it.exclude 'org/openapitools/**/**.java'
}